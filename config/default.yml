# Path to the file containing the field definitions
fieldDefinitionsFile: ./defaultFieldDefinitions.yml

# Cache
cache:
    # Set the cache expiration time as a duration string composed of a number and a unit.
    # Valid time units are: 
    #   s: seconds
    #   m: minutes
    #   h: hours
    #   d: days
    #   w: weeks
    expiration: 1w

# Namespaces for retrieving and generating URIs
namespaces:
    # The namespace for entities. This is used to construct the URI for retrieving the subject 
    # based on a type and ID. For example, for entities of the form 'https://example.org/object/123', 
    # the namespace would be 'https://example.org/'. (The type would be 'object', and the ID
    # would be '123'. These URIs must exist in the triplestore)
    entities: https://example.org/

    # The namespace for manifests. This is used to construct the URI for the manifest based
    # on a type and ID. For example, for manifests of the form 'http://iiif.example.com/manifest/object/123',
    # the namespace would be 'http://iiif.example.com/manifest/'.
    manifests: http://iiif.example.com/manifest/

# Queries for retrieving labels and images for URIs
queries:
    # The label query template is used to retrieve labels for URIs.
    # The service expects a SPARQL SELECT query that returns a single
    # variable ?label. The query is executed with $subject replaced by
    # the URI of the subject.
    label: |
        PREFIX crm: <http://www.cidoc-crm.org/cidoc-crm/>
        PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
        PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
        SELECT ?label WHERE {
            {
                $subject skos:prefLabel ?l1 .
            } UNION {
                $subject rdfs:label ?l2.
            } UNION {
                $subject crm:P190_has_symbolic_content ?l3 .
            } UNION {
                $subject crm:P90_has_value ?l4 .
            }
            BIND(COALESCE(?l1, ?l2, ?l3, ?l4) AS ?label)
        } LIMIT 1

    # The image query template is used to retrieve images for URIs.
    # The service expects a SPARQL SELECT query that returns three
    # variables ?image, ?width and ?height. The query is executed with
    # $subject replaced by the URI of the subject.
    images: |
        PREFIX aat: <http://vocab.getty.edu/aat/>
        PREFIX crm: <http://www.cidoc-crm.org/cidoc-crm/>
        PREFIX la: <https://linked.art/ns/terms/>
        SELECT ?image ?width ?height WHERE {
            $subject crm:P138i_has_representation?/la:digitally_shown_by ?imageObject .
            ?imageObject la:digitally_available_via/la:access_point ?image ;
                crm:P43_has_dimension ?dimWidth ;
                crm:P43_has_dimension ?dimHeight .
            ?dimWidth crm:P2_has_type aat:300055647 ;
                crm:P90_has_value ?width .
            ?dimHeight crm:P2_has_type aat:300055644 ;
                crm:P90_has_value ?height .
        }

    # The thumbnail query template is used to retrieve thumbnails for URIs.
    # The service expects a SPARQL SELECT query that returns three variables
    # ?thumbnail, ?width and ?height. The query is executed with $subject
    thumbnails: |
        PREFIX aat: <http://vocab.getty.edu/aat/>
        PREFIX crm: <http://www.cidoc-crm.org/cidoc-crm/>
        PREFIX la: <https://linked.art/ns/terms/>
        SELECT ?thumbnail ?width ?height WHERE {
            $subject crm:P138i_has_representation ?thumbnailObject .
            ?thumbnailObject crm:P2_has_type aat:300404450 .
            
            ?assignment crm:P140_assigned_attribute_to ?thumbnailObject ;
            crm:P141_assigned aat:300404450 ;
            crm:P16_used_specific_object ?subject .
            
            ?thumbnailObject la:digitally_shown_by ?imageObject .
            ?imageObject la:digitally_available_via/la:access_point ?thumbnail ;
                crm:P43_has_dimension ?dimWidth ;
                crm:P43_has_dimension ?dimHeight .
            ?dimWidth crm:P2_has_type aat:300055647 ;
                crm:P90_has_value ?width .
            ?dimHeight crm:P2_has_type aat:300055644 ;
                crm:P90_has_value ?height .
        }

rights:
    # Retrieve the license for a given URI. The service expects a SPARQL SELECT query that returns a single
    # variable ?license. The ?license is expected to be a Creative Commons license URI, a RightsStatements.org URL
    # or similar (see: https://iiif.io/api/cookbook/recipe/0008-rights)
    manifestLicenseQuery: |
        PREFIX crm: <http://www.cidoc-crm.org/cidoc-crm/>
        SELECT ?license WHERE {
            $subject crm:P104_is_subject_to ?right .
            ?right crm:P2_has_type ?license .
        }

options:
    # If set to true, the service will retrieve metadata for images
    # default: False
    imageMetadata: False